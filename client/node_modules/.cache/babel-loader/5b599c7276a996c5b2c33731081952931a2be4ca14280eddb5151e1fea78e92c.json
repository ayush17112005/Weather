{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\Whether\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { Button, Input, VStack, useToast } from '@chakra-ui/react';\nimport front_end from './components/front_end';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // useState hooks to manage city name and weather data\n  const [city, setCity] = useState('');\n  const [weather, setWeather] = useState(null);\n  const toast = useToast(); // Initialize useToast hook\n\n  // Function to handle form submission\n  async function handleSubmit(e) {\n    console.log(\"Submitted\");\n    try {\n      // Clear previous weather data\n      setWeather(null);\n\n      // Sending a POST request to the backend with the city name\n      const response = await axios.post(\"http://localhost:3001/weather\", {\n        city\n      });\n      setWeather(response.data); // Update weather state with response data\n      console.log(response.data); // Log the response data\n    } catch (err) {\n      console.log(err); // Log any error if occurs\n      // Display error toast\n      toast({\n        title: \"Error fetching weather data.\",\n        description: \"Please check the city name and try again.\",\n        status: \"error\",\n        duration: 1000,\n        isClosable: true\n      });\n    }\n  }\n\n  // Function to handle input changes\n  function handleOnChange(e) {\n    setCity(e.target.value); // Update city state with input value\n    console.log(e.target.value); // Log the current input value\n  }\n\n  // Function to convert Kelvin to Celsius\n  const kelvinToCelsius = kelvin => {\n    return (kelvin - 273.15).toFixed(2); // Convert and round to 2 decimal places\n  };\n  return (\n    /*#__PURE__*/\n    // <VStack spacing={2}>\n    //   <Input\n    //     onChange={handleOnChange} \n    //     type='text' \n    //     placeholder='Write your city name'\n    //     width={\"auto\"} \n    //     value={city}\n    //   />\n    //   <Button color={\"whiteAlpha800\"} onClick={handleSubmit} size={\"sm\"}>Get Weather</Button>\n    //   {weather && (\n    //     <div>\n    //       <h2>Weather in {weather.name}</h2>\n    //       <p>Temperature: {kelvinToCelsius(weather.main.temp)}째C</p>\n    //       <p>Feels Like: {kelvinToCelsius(weather.main.feels_like)}째C</p>\n    //       <p>Weather: {weather.weather[0].description}</p>\n    //       <p>Wind Speed: {weather.wind.speed} m/s</p>\n    //       <p>Visibility: {weather.visibility} meters</p>\n    //     </div>\n    //   )}\n    // </VStack>\n    _jsxDEV(\"front_end\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(App, \"npObsqNEywTp0yG0CCyjsZJ60uo=\", false, function () {\n  return [useToast];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","Button","Input","VStack","useToast","front_end","jsxDEV","_jsxDEV","App","_s","city","setCity","weather","setWeather","toast","handleSubmit","e","console","log","response","post","data","err","title","description","status","duration","isClosable","handleOnChange","target","value","kelvinToCelsius","kelvin","toFixed","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/Whether/client/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { Button, Input, VStack, useToast } from '@chakra-ui/react';\nimport front_end from './components/front_end';\n\nconst App = () => {\n  // useState hooks to manage city name and weather data\n  const [city, setCity] = useState('');\n  const [weather, setWeather] = useState(null);\n  const toast = useToast(); // Initialize useToast hook\n\n  // Function to handle form submission\n  async function handleSubmit(e) {\n    console.log(\"Submitted\");\n\n    try {\n      // Clear previous weather data\n      setWeather(null);\n\n      // Sending a POST request to the backend with the city name\n      const response = await axios.post(\"http://localhost:3001/weather\", { city });\n      setWeather(response.data); // Update weather state with response data\n      console.log(response.data); // Log the response data\n    } catch (err) {\n      console.log(err); // Log any error if occurs\n      // Display error toast\n      toast({\n        title: \"Error fetching weather data.\",\n        description: \"Please check the city name and try again.\",\n        status: \"error\",\n        duration: 1000,\n        isClosable: true,\n      });\n    }\n  }\n\n  // Function to handle input changes\n  function handleOnChange(e) {\n    setCity(e.target.value); // Update city state with input value\n    console.log(e.target.value); // Log the current input value\n  }\n\n  // Function to convert Kelvin to Celsius\n  const kelvinToCelsius = (kelvin) => {\n    return (kelvin - 273.15).toFixed(2); // Convert and round to 2 decimal places\n  }\n\n  return (\n    // <VStack spacing={2}>\n    //   <Input\n    //     onChange={handleOnChange} \n    //     type='text' \n    //     placeholder='Write your city name'\n    //     width={\"auto\"} \n    //     value={city}\n    //   />\n    //   <Button color={\"whiteAlpha800\"} onClick={handleSubmit} size={\"sm\"}>Get Weather</Button>\n    //   {weather && (\n    //     <div>\n    //       <h2>Weather in {weather.name}</h2>\n    //       <p>Temperature: {kelvinToCelsius(weather.main.temp)}째C</p>\n    //       <p>Feels Like: {kelvinToCelsius(weather.main.feels_like)}째C</p>\n    //       <p>Weather: {weather.weather[0].description}</p>\n    //       <p>Wind Speed: {weather.wind.speed} m/s</p>\n    //       <p>Visibility: {weather.visibility} meters</p>\n    //     </div>\n    //   )}\n    // </VStack>\n    <front_end/>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,kBAAkB;AAClE,OAAOC,SAAS,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAMe,KAAK,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAE1B;EACA,eAAeW,YAAYA,CAACC,CAAC,EAAE;IAC7BC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;IAExB,IAAI;MACF;MACAL,UAAU,CAAC,IAAI,CAAC;;MAEhB;MACA,MAAMM,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,IAAI,CAAC,+BAA+B,EAAE;QAAEV;MAAK,CAAC,CAAC;MAC5EG,UAAU,CAACM,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;MAC3BJ,OAAO,CAACC,GAAG,CAACC,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZL,OAAO,CAACC,GAAG,CAACI,GAAG,CAAC,CAAC,CAAC;MAClB;MACAR,KAAK,CAAC;QACJS,KAAK,EAAE,8BAA8B;QACrCC,WAAW,EAAE,2CAA2C;QACxDC,MAAM,EAAE,OAAO;QACfC,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,CAAC;IACJ;EACF;;EAEA;EACA,SAASC,cAAcA,CAACZ,CAAC,EAAE;IACzBL,OAAO,CAACK,CAAC,CAACa,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IACzBb,OAAO,CAACC,GAAG,CAACF,CAAC,CAACa,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EAC/B;;EAEA;EACA,MAAMC,eAAe,GAAIC,MAAM,IAAK;IAClC,OAAO,CAACA,MAAM,GAAG,MAAM,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC;EAED;IAAA;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA1B,OAAA;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAW;EAAC;AAEhB,CAAC;AAAA5B,EAAA,CAjEKD,GAAG;EAAA,QAIOJ,QAAQ;AAAA;AAAAkC,EAAA,GAJlB9B,GAAG;AAmET,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}