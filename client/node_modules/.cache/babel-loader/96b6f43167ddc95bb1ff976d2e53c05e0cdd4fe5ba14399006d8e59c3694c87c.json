{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\Whether\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { Button, Input, VStack, useToast } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // useState hooks to manage city name and weather data\n  const [city, setCity] = useState('');\n  const [weather, setWeather] = useState(null);\n  const toast = useToast(); // Initialize useToast hook\n\n  // Function to handle form submission\n  async function handleSubmit(e) {\n    console.log(\"Submitted\");\n    try {\n      // Clear previous weather data\n      setWeather(null);\n\n      // Sending a POST request to the backend with the city name\n      const response = await axios.post(\"http://localhost:3001/weather\", {\n        city\n      });\n      setWeather(response.data); // Update weather state with response data\n      console.log(response.data); // Log the response data\n    } catch (err) {\n      console.log(err); // Log any error if occurs\n      // Display error toast\n      toast({\n        title: \"Error fetching weather data.\",\n        description: \"Please check the city name and try again.\",\n        status: \"error\",\n        duration: 1000,\n        isClosable: true\n      });\n    }\n  }\n\n  // Function to handle input changes\n  function handleOnChange(e) {\n    setCity(e.target.value); // Update city state with input value\n    console.log(e.target.value); // Log the current input value\n  }\n\n  // Function to convert Kelvin to Celsius\n  const kelvinToCelsius = kelvin => {\n    return (kelvin - 273.15).toFixed(2); // Convert and round to 2 decimal places\n  };\n  return /*#__PURE__*/_jsxDEV(VStack, {\n    spacing: 4,\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      onChange: handleOnChange,\n      type: \"text\",\n      placeholder: \"Write your city name\",\n      width: \"auto\",\n      value: city\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: \"black\",\n      onClick: handleSubmit,\n      size: \"sm\",\n      children: \"Get Weather\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), weather && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Weather in \", weather.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Temperature: \", kelvinToCelsius(weather.main.temp), \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Feels Like: \", kelvinToCelsius(weather.main.feels_like), \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Weather: \", weather.weather[0].description]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Wind Speed: \", weather.wind.speed, \" m/s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Visibility: \", weather.visibility, \" meters\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"npObsqNEywTp0yG0CCyjsZJ60uo=\", false, function () {\n  return [useToast];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","Button","Input","VStack","useToast","jsxDEV","_jsxDEV","App","_s","city","setCity","weather","setWeather","toast","handleSubmit","e","console","log","response","post","data","err","title","description","status","duration","isClosable","handleOnChange","target","value","kelvinToCelsius","kelvin","toFixed","spacing","children","onChange","type","placeholder","width","fileName","_jsxFileName","lineNumber","columnNumber","color","onClick","size","name","main","temp","feels_like","wind","speed","visibility","_c","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/Whether/client/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { Button, Input, VStack, useToast } from '@chakra-ui/react';\n\nconst App = () => {\n  // useState hooks to manage city name and weather data\n  const [city, setCity] = useState('');\n  const [weather, setWeather] = useState(null);\n  const toast = useToast(); // Initialize useToast hook\n\n  // Function to handle form submission\n  async function handleSubmit(e) {\n    console.log(\"Submitted\");\n\n    try {\n      // Clear previous weather data\n      setWeather(null);\n\n      // Sending a POST request to the backend with the city name\n      const response = await axios.post(\"http://localhost:3001/weather\", { city });\n      setWeather(response.data); // Update weather state with response data\n      console.log(response.data); // Log the response data\n    } catch (err) {\n      console.log(err); // Log any error if occurs\n      // Display error toast\n      toast({\n        title: \"Error fetching weather data.\",\n        description: \"Please check the city name and try again.\",\n        status: \"error\",\n        duration: 1000,\n        isClosable: true,\n      });\n    }\n  }\n\n  // Function to handle input changes\n  function handleOnChange(e) {\n    setCity(e.target.value); // Update city state with input value\n    console.log(e.target.value); // Log the current input value\n  }\n\n  // Function to convert Kelvin to Celsius\n  const kelvinToCelsius = (kelvin) => {\n    return (kelvin - 273.15).toFixed(2); // Convert and round to 2 decimal places\n  }\n\n  return (\n    <VStack spacing={4}>\n      <Input\n        onChange={handleOnChange} \n        type='text' \n        placeholder='Write your city name'\n        width={\"auto\"} \n        value={city}\n      />\n      <Button color={\"black\"} onClick={handleSubmit} size={\"sm\"}>Get Weather</Button>\n      {weather && (\n        <div>\n          <h2>Weather in {weather.name}</h2>\n          <p>Temperature: {kelvinToCelsius(weather.main.temp)}°C</p>\n          <p>Feels Like: {kelvinToCelsius(weather.main.feels_like)}°C</p>\n          <p>Weather: {weather.weather[0].description}</p>\n          <p>Wind Speed: {weather.wind.speed} m/s</p>\n          <p>Visibility: {weather.visibility} meters</p>\n        </div>\n      )}\n    </VStack>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}